/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: azclavell (https://sketchfab.com/azclavell)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/jordan1-lowpoly-791082a9e2d04b4185c7cc390a90e42c
title: Jordan1 LOWPOLY
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { proxy, useSnapshot } from "valtio";
// import { useFrame } from "@react-three/fiber";
import { colorPallate, fauxName } from "../../helpers";
import _ from "lodash";

export const state = proxy({ obj: colorPallate });

export const reset = () => {
  state.obj = _.cloneDeep(colorPallate);
};

export default function Model(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("./planeJordans/scene.gltf");
  const snap = useSnapshot(state);
  const [hovered, set] = useState(null);

  // useFrame((state) => {
  //   const t = state.clock.getElapsedTime();
  //   group.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20;
  //   group.current.rotation.x = Math.cos(t / 4) / 8;
  //   group.current.rotation.y = Math.sin(t / 4) / 8;
  //   group.current.position.y = (1 + Math.sin(t / 1.5)) / 10;
  // });

  useEffect(() => {
    const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="${snap.obj.items[hovered]}"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
    const auto = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/></svg>`;
    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
      hovered ? cursor : auto
    )}'), auto`;

    return () => {
      document.body.style.cursor = "default";
    };
    // eslint-disable-next-line
  }, [hovered]);

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onPointerOver={(e) => {
        e.stopPropagation(); set(fauxName(e.object.material.name))
      }}
      onPointerOut={(e) => e.intersections.length === 0 && set(null)}
      onPointerMissed={() => (state.obj.current = null)}
      onPointerDown={(e) => {
        e.stopPropagation();
        (state.obj.current = fauxName(e.object.material.name))
      }}
    >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Object_2.geometry}
          material={materials["Material.004"]}
          material-color={snap.obj.items.midSole} /*mid sole 4d8c */
        />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials["Material.003"]}
          material-color={snap.obj.items.outerSole} /*outer sole 2656 */
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials["Material.003"]}
          material-color={snap.obj.items.outerSole} /*outer sole 2656 */
        />
        <mesh
          geometry={nodes.Object_5.geometry}
          material={materials["Material.005"]}
          material-color={snap.obj.items.colar} /*colar ad27 */
        />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials["Material.002"]}
          material-color={
            snap.obj.items.laceEdge
          } /* lace and sock lining edge 505c */
        />
        <mesh
          geometry={nodes.Object_7.geometry}
          material={materials["Material.012"]}
          material-color={snap.obj.items.lace} /* lace c4ef*/
        />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials["Material.022"]}
          material-color={snap.obj.items.sockLining} /* sock lining b389 */
        />
        <mesh
          geometry={nodes.Object_9.geometry}
          material={materials.WHITE_LEATHER}
          material-color={
            snap.obj.items.toeboxAndQuater
          } /*  toebox   and quater 8eac */
        />
        <mesh
          geometry={nodes.Object_10.geometry}
          material={materials.WHITE_LEATHER2}
          material-color={snap.obj.items.tounge} /* tonuge f746  */
        />
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials["Material.003"]}
          material-color={snap.obj.items.outerSole} /* outer sole 2656 */
        />
        <mesh
          geometry={nodes.Object_12.geometry}
          material={materials["Material.013"]}
          material-color={snap.obj.items.sole} /*SOLE 5e75 */
        />
        <mesh
          geometry={nodes.Object_13.geometry}
          material={materials["Material.003"]}
          material-color={snap.obj.items.outerSole} /*outer sole 2656 */
        />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials["Material.001"]}
          material-color={snap.obj.items.vamp} /** VAMP 7cad */
        />
        <mesh
          geometry={nodes.Object_15.geometry}
          material={materials["Material.011"]}
          material-color={
            snap.obj.items.heelAndLowVamp
          } /* HEEL AND LOWVAMP  b205 */
        />
        <mesh
          geometry={nodes.Object_16.geometry}
          material={materials["Material.021"]}
          material-color={snap.obj.items.toeAndSwoosh} /* TOE AND SWOOSH 30cc */
        />
      </group>
    </group>
  );
}

useGLTF.preload("/scene.gltf");
